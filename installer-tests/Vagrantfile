# -*- mode: ruby -*-
# vi: set ft=ruby :

# Vagrantfile API/syntax version. Don't touch unless you know what you're doing!
VAGRANTFILE_API_VERSION = "2"

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
  # We have a few box types.

  # In general, we use a shell script to "provision" the box. just
  # sets up a different hostname than vagrant, because I find
  # "vagrant" to be a weird hostname.
  config.ssh.shell = "bash"
  config.vm.provision "shell",
                       inline: "cd /vagrant && echo localhost > /etc/hostname && hostname localhost"


  # Make sure to share the dir one *above* the current working directory. That way, we get
  # the Sandstorm source tree, which includes the all-important install.sh.
  config.vm.synced_folder "..", "/vagrant"

  # In this Vagrantbox purely to test the install script, we do not
  # forward any ports. If we need to test if ports are available, we
  # can do that by SSH-ing in.

  # Calculate the number of CPUs and the amount of RAM the system has,
  # in a platform-dependent way; further logic below.
  cpus = nil
  total_kB_ram = nil

  host = RbConfig::CONFIG['host_os']
  if host =~ /darwin/
    cpus = `sysctl -n hw.ncpu`.to_i
    total_kB_ram =  `sysctl -n hw.memsize`.to_i / 1024
  elsif host =~ /linux/
    cpus = `nproc`.to_i
    total_kB_ram = `grep MemTotal /proc/meminfo | awk '{print $2}'`.to_i
  end

  # Use the same number of CPUs within Vagrant as the system, with 1
  # as a default.
  #
  # Use at least 512MB of RAM, and if the system has more than 2GB of
  # RAM, use 1/4 of the system RAM. This seems a reasonable compromise
  # between having the Vagrant guest operating system not run out of
  # RAM entirely (which it basically would if we went much lower than
  # 512MB) and also allowing it to use up a healthily large amount of
  # RAM so it can run faster on systems that can afford it.
  config.vm.provider :virtualbox do |vb|
    if cpus.nil?
      vb.cpus = 1
    else
      vb.cpus = cpus
    end

    if total_kB_ram.nil? or total_kB_ram < 2048000
      vb.memory = 512
    else
      vb.memory = (total_kB_ram / 1024 / 4)
    end
  end


  config.vm.define "default", primary: true do |default|
    # The default is the Ubuntu 14.04 ("trusty tahr") cloud image.
    default.vm.box = "trusty64"

    # The url from which to fetch that base box.
    default.vm.box_url = "https://cloud-images.ubuntu.com/vagrant/trusty/current/trusty-server-cloudimg-amd64-vagrant-disk1.box"
  end

  config.vm.define "jessie" do |jessie|
    # The default is the Ubuntu 14.04 ("trusty tahr") cloud image.
    jessie.vm.box = "thoughtbot/debian-jessie-64"

    jessie.vm.provision "shell",
                       inline: "sudo sed -i s,ftp.us.debian.org,http.debian.net, /etc/apt/sources.list"
    jessie.vm.provision "shell",
                       inline: "if [ ! -d /usr/share/doc/curl ] ; then sudo apt-get -qq update && sudo DEBIAN_FRONTEND=noninteractive apt-get -q -y install curl ; fi"

  end

end
